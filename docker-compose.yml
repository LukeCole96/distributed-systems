services:
  channel-metadata-store:
    build: channel-metadata-store
    ports:
      - 8080:8080
    depends_on:
      - db
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/$DATABASE_NAME
      - SPRING_DATASOURCE_USERNAME=$YOUR_USERNAME
      - SPRING_DATASOURCE_PASSWORD=$YOUR_PASSWORD
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
  
  db:
    image: postgres
    container_name: db
    environment:
      # - POSTGRES_USER=$YOUR_USERNAME
      # - POSTGRES_PASSWORD=$YOUR_PASSWORD
      # - POSTGRES_DB=$YOUR_DB_NAME
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=channel-metadata-db
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  prometheus:
    image: prom/prometheus
    ports:
      - '9090:9090'
    links:
      - alertmanager
    volumes:
      - ./prometheus:/etc/prometheus
    extra_hosts:
      - 'host.docker.internal:host-gateway' #USED TO ALLOW COMS WITH APP
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: always
    networks:
      - localprom
  
  alertmanager:
    image: prom/alertmanager
    ports:
      - '9093:9093'
    volumes:
      - ./alert-manager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
    restart: always
  
  grafana:
    image: grafana/grafana-enterprise
    ports:
      - '3000:3000'
    depends_on:
      - prometheus
    environment:
      #      - GF_SERVER_ROOT_URL=http://my.grafana.server/
      #      - GF_INSTALL_PLUGINS=grafana-clock-panel
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - './datasources:/etc/grafana/provisioning/datasources'
    networks:
      - localprom
  
  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "my-topic:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  
networks:
  localprom:
    driver: bridge
